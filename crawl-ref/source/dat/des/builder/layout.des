###############################################################################
# layout.des: Most large layout vaults go here. These are defined by having
#             both ORIENT: encompass and TAGS: layout. These are not true
#             vaults, in that the dungeon builder can add other vaults on
#             top of them. For the "loops" level layouts, see layout_loops.des.
#
###############################################################################

: require("dlua/layout/zonify.lua")
: require("dlua/layout/theme.lua")

{{
    -- Call func num times around a circle of radius centered at (x, y)
    function apply_circle(x, y, num, radius, scale_x, scale_y, func)
        radius = math.floor(radius)
        for n = 1, num do
            local rad = n * 2 * math.pi / num

            local rx = math.floor(math.cos(rad) * radius * scale_x + 0.5)
            local ry = math.floor(math.sin(rad) * radius * scale_y + 0.5)

            func(x + rx, y + ry)
        end
    end

    function spotty_stairs(mapgrd)
        local gxm, gym = dgn.max_bounds()

        local in_slime = you.in_branch("slime")
        local elevator = not in_slime

        -- We now only generate the three downstairs and build spotty
        -- caves around them (only three bubbles). This means connectivity
        -- is always guaranteed downstream to the branch end, which is always
        -- connected, so all bubbles can be traversed.
        local stairs = { '}', ')', ']' }

        local make_floor = function (x, y)
            mapgrd[x][y] = '.'
        end

        for i, glyph in ipairs(stairs) do
            local x, y
            repeat
                x = crawl.random_range(5, gxm - 5)
                y = crawl.random_range(5, gym - 5)
            until mapgrd[x][y] == 'x' and mapgrd[x + 1][y] == 'x'

            mapgrd[x][y] = glyph

            apply_circle(x, y, 4, 1, 1, 1, make_floor)

            if in_slime then
                apply_circle(x, y, 8, 2, 1, 1, make_floor)
            end

            if elevator and glyph == '}' then
                mapgrd[x + 1][y] = '{'
            end
        end
    end

}}

##############################################################
# layout_forbidden_doughnut
#
# This replaces dungeon.cc:_plan_1(). It usually creates a
# room with a large hole in the middle.
#
NAME:   layout_forbidden_donut
DEPTH:  D:4-, Lair:1-7, Pan
WEIGHT: 10
ORIENT: encompass
TAGS:   overwritable layout no_primary_vault allow_dup unrand layout_type_open
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width=gxm, height=gym, fill='x'}

    local width = (10 - crawl.random2(7))

    local floor = '.'
    local wall = 'x'

    -- construct donut
    fill_area{x1=10, y1=10, x2=gxm-10, y2=10+width, fill=floor}
    fill_area{x1=10, y1=60-width, x2=gxm-10, y2=gym-10, fill=floor}
    fill_area{x1=10, y1=10, x2=10+width, y2=gym-10, fill=floor}
    fill_area{x1=60-width, y1=10, x2=gxm-10, y2=gym-10, fill=floor}

    local spotty = crawl.coinflip()
    local smears = crawl.random2(300)

    -- sometimes add a hallway cross through center
    if crawl.coinflip() then
        local width2 = 1 + crawl.random2(5)

        fill_area{x1=10,           y1=gym/2-width2,
                  x2=gxm-10,       y2=gym/2+width2, fill=floor}
        fill_area{x1=gxm/2-width2, y1=10,
                  x2=gxm/2+width2, y2=gym-10,       fill=floor}

        -- sometimes add a small octagon room
        if crawl.coinflip() then
            local obl = 0
            if crawl.coinflip() then
                obl = 5 + crawl.random2(20)
            end

            local fill = crawl.random_element({
                ["."] = 10,
                ["w"] = 5,
                ["l"] = 1,
            })
            octa_room{x1=25, y1=25, x2=gxm-25, y2=gym-25,
                      oblique=obl, replace='x', inside=fill}

            -- decrease spotty chance
            spotty = crawl.one_chance_in(5)
        end
    end

    local spotty_boxy = crawl.coinflip()
    local smear_boxy = crawl.coinflip()

    if spotty then
        spotty_map{boxy=spotty_boxy}
    end
    if not spotty and crawl.one_chance_in(4) or spotty then
        smear_map{iterations=smears, smear='x', onto='.', boxy=smear_boxy}
    end

    if spotty then
      theme.D.caves(_G)
    else
      theme.level_material(_G)
    end
}}
MAP
ENDMAP

##############################################################
# layout_cross
#
# This replaces dungeon.cc:_plan_2(). It creates a large cross
# of varying width.
#
NAME:    layout_cross
DEPTH:   D:4-, Lair:1-7
WEIGHT:  10
ORIENT:  encompass
TAGS:    overwritable layout allow_dup unrand layout_type_cross
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'L'}

    local floor = '.'
    local wall = 'x'
    local border = 'x'

    local width = 5 - crawl.random2(5)
    local height = 5 - crawl.random2(5)

    -- Include a small possibility of adding windows around the cross.
    -- This layout can get used with spotty_level, so don't make this
    -- chance too large as lava/water prevents that from happening.
    local window = not you.in_branch("Lair") and crawl.one_chance_in(20)

    if window then
        if crawl.coinflip() then
            wall = 'l'
            border = 'L'
            kfeat("L = endless_lava")
        else
            wall = 'w'
            border = 'L'
            kfeat("L = open_sea")
        end
    end

    fill_area{fill = border}
    fill_area{x1=1, y1=1, x2=gxm-2, y2=gym-2, fill = wall}

    -- don't spam clouds if the outside is lava
    kprop("l = no_cloud_gen")

    -- create window
    if window then
        local clear = 'm'
        fill_area{x1=10, y1=gym/2-height-1, x2=gxm-10, y2=gym/2-height-1, fill=clear}
        fill_area{x1=10, y1=gym/2+height+1, x2=gxm-10, y2=gym/2+height+1, fill=clear}
        fill_area{x1=gxm/2-width-1, y1=10, x2=gxm/2-width-1, y2=gym-10, fill=clear}
        fill_area{x1=gxm/2+width+1, y1=10, x2=gxm/2+width+1, y2=gym-10, fill=clear}
    end

    -- create a cross
    fill_area{x1=10, y1=gym/2-height, x2=gxm-10, y2=gym/2+height, fill=floor}
    fill_area{x1=gxm/2-width, y1=10, x2=gxm/2+width, y2=gym-10, fill=floor}

    if not crawl.one_chance_in(4) then
        spotty_map{boxy = crawl.coinflip()}
    end

    theme.level_material(_G)
}}
MAP
ENDMAP

#############################################################
# layout_big_octagon
#
# This replaces dungeon.cc:_plan_6(). It has an octagonal
# room with some number of pillars in the middle. The stairs
# are generally all grouped together.
#
NAME: layout_big_octagon
DEPTH:   D:4-, Lair:1-7, Pan
WEIGHT:  6 (Pan), 10
ORIENT:  encompass
TAGS:    overwritable layout no_primary_vault allow_dup unrand layout_type_open
{{
    -- Step 1: Big octagon.

    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    local oblique = 10 + crawl.random2(20)
    octa_room{
        x1 = 10,
        y1 = 10,
        x2 = gxm-10,
        y2 = gym-10,
        oblique = oblique,
        replace = 'x',
        inside = '.'}

    local do_smear = crawl.coinflip()
    if do_smear then
        local iterations = 100 + crawl.random2(800)
        smear_map{iterations = iterations, boxy = false}

        --Fill in disconnected zones now, prior to adding the stairs.
        --Temporarily set a (passable) unique symbol in the middle of the map,
        --to guarantee everything is connected to it after smearing.
        mapgrd[gxm/2][gym/2] = '@'
        fill_disconnected{wanted = '@'}
        mapgrd[gxm/2][gym/2] = '.'
    end

    -- Step 2: Add pillars

    -- pillar types and relative weights
    local pillar_fill = {
        ["x"] = 15,
        ["b"] = 5,
        ["v"] = 4,
        ["m"] = 3,
        ["w"] = 2,
        ["l"] = 1,
    }
    if (you.in_branch("lair")) then
        pillar_fill["t"] = 15
    end

    -- Potential pillar drawing routines
    local pillar_func = {
        make_circle,
        make_diamond,
        make_square,
        make_rounded_square
    }

    -- Pillar size params
    -- NOTE: Be careful about tweaking the ranges here. Pillars that are
    -- too large, close, or large in number can entirely surround the center.
    local pfunc = pillar_func[crawl.random2(#pillar_func) + 1]
    local num = 3 + crawl.random2(9)
    local pillar_radius = 1 + crawl.random2((pfunc == make_diamond) and 3 or 2)
    local circle_radius = 2 + crawl.random2(6) + pillar_radius * 2 + num / 2
    local fill = crawl.random_element(pillar_fill)

    -- Finally, make the pillars
    local make_pillar = function(x, y)
        return pfunc({
            x = x,
            y = y,
            radius = pillar_radius,
            fill = fill})
    end
    apply_circle(gxm/2, gym/2, num, circle_radius, 1, 1, make_pillar)

    -- Step 3: Create stairs

    -- Potential stair locations
    -- 0) random
    -- 1) inside
    -- 2) up
    -- 3) right
    -- 4) down
    -- 5) left

    local up_loc = crawl.random2(6)
    local down_loc = crawl.random2(6)
    while up_loc == down_loc do
        down_loc = crawl.random2(6)
    end

    local up_stairs = {"{", "(", "["}
    local down_stairs = {"}", ")", "]"}
    local full_stair_set = {[up_loc] = up_stairs, [down_loc] = down_stairs}

    for loc, stair_list in pairs (full_stair_set) do
        for i = 1, #stair_list do
            local st = stair_list[i]

            if loc == 0 then
                replace_random({find = ".", replace = st, required = true})
            elseif loc == 1 then
                mapgrd[gxm/2 + i - 2][gym/2 + 1 - math.abs(i - 2)] = st
            elseif loc == 2 then
                replace_first({
                    required = true,
                    x = gxm/2 + i - 2,
                    y = 0,
                    xdir = 0,
                    ydir = 1,
                    find = ".",
                    replace = st})
            elseif loc == 3 then
                replace_first({
                    required = true,
                    x = gxm - 1,
                    y = gym/2 + i - 2,
                    xdir = -1,
                    ydir = 0,
                    find = ".",
                    replace = st})
            elseif loc == 4 then
                replace_first({
                    required = true,
                    x = gxm/2 + i - 2,
                    y = gym - 1,
                    xdir = 0,
                    ydir = -1,
                    find = ".",
                    replace = st})
            elseif loc == 5 then
                replace_first({
                    required = true,
                    x = 0,
                    y = gym/2 + i - 2,
                    xdir = 1,
                    ydir = 0,
                    find = ".",
                    replace = st})
            end
        end
    end

    if (you.in_branch("D") and you.depth() > 21 or you.where() == "Pan")
      and crawl.coinflip()
    then
        mapgrd[40][36] = 'O'
        mapgrd[41][36] = 'O'
        nsubst('O = 1:O / *:.')
        if you.in_branch("Pan") then
            kfeat('O = exit_through_abyss')
        else
            kfeat('O = enter_abyss')
        end
    end

    theme.level_material(_G)
}}
MAP
ENDMAP

##############################################################
# layout_rooms
#
# This replaces dungeon.cc:_plan_3().
#
NAME: layout_rooms
DEPTH: D, Depths, Lair, Snake, Elf, Dwarf, Crypt, Zot, Pan
WEIGHT: 60 (Pan), 10 (Zot), 20
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_rooms
{{
    function random_room_point(room)
        return dgn.point(room.x1 + crawl.random2(room.x2 - room.x1),
                         room.y1 + crawl.random2(room.y2 - room.y1))
    end

    function join_the_dots_p(start, finish)
        return join_the_dots({
            x1 = start.x,
            y1 = start.y,
            x2 = finish.x,
            y2 = finish.y})
    end

    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    local num_rooms = 30 + crawl.random2(90)
    local exclusive = not crawl.one_chance_in(10)
    local exclusive2 = crawl.coinflip()

    local rooms = {}

    for i = 0, num_rooms do
        local new_room = {
            x1 = 10 + crawl.random2(50),
            y1 = 10 + crawl.random2(40)
        }
        new_room.x2 = new_room.x1 + 2 + crawl.random2(8)
        new_room.y2 = new_room.y1 + 2 + crawl.random2(8)

        local not_walls = count_antifeature_in_box({
            x1 = new_room.x1,
            y1 = new_room.y1,
            x2 = new_room.x2,
            y2 = new_room.y2,
            feat = "x"})

        if (not exclusive or not_walls == 0) then
            replace_area({
                x1 = new_room.x1,
                y1 = new_room.y1,
                x2 = new_room.x2,
                y2 = new_room.y2,
                find = "x",
                replace = "."})

            if #rooms > 0 and not exclusive2 then
                join_the_dots_p(random_room_point(new_room),
                                random_room_point(rooms[#rooms]))
            end

            table.insert(rooms, new_room)
            if #rooms >= 30 then
                break
            end
        end
    end

    if exclusive2 then
        for i = 2, #rooms do
          join_the_dots_p(random_room_point(rooms[i]),
                          random_room_point(rooms[i - 1]))
        end
    end

    theme.level_material(_G)
}}
MAP
ENDMAP

##############################################################
# layout_city
#
# This replaces dungeon.cc:_city_level().
#
# Only available on upper Lair depths otherwise the high
# ruination makes it basically indistinguishable from a big
# open room
NAME:   layout_city
DEPTH:  Lair:1-2, Snake, Dwarf, Crypt:1-4, Dis:1-6
WEIGHT: 10
ORIENT: encompass
TAGS:   overwritable layout allow_dup unrand no_rotate no_vmirror no_hmirror
TAGS:   layout_type_city
{{
    function treasure_area (x1, y1, x2, y2)
        x2 = x2 + 1
        y2 = y2 + 1

        if x2 <= x1 or y2 <= y1 then
            return false
        end

        local area = (x2 - x1) * (y2 - y1)
        if area >= 40 then
            return false
        end

        -- for bigger rooms, use less valuable loot
        local loot = { }
        if area <= 4 then
            loot['|'] = 1
        elseif area <= 10 then
            loot['|'] = 10 - area
            loot['*'] = area - 4
        elseif area < 25 then
            loot['*'] = 25 - area
            loot['%'] = area - 10
        else
            loot['%'] = 1
        end

        local tl = dgn.point(x1, y1)
        local br = dgn.point(x2 - 1, y2 - 1)

        for point in iter.rect_iterator(tl, br) do
            if is_valid_coord {x = point.x, y = point.y } then
                if is_passable_coord { x=point.x, y=point.y }
                   or crawl.coinflip() then
                    mapgrd[point.x][point.y] = crawl.random_element (loot)
                end
            end
        end

        return true
    end

    local gxm, gym = dgn.max_bounds()

    extend_map{width = gxm, height = gym, fill = 'x'}

    local wall_type
    local rooms = {}
    local i, j

    if you.branch() == "Dis" then
        wall_type = 'x'
    elseif crawl.one_chance_in(100) then
        wall_type = 'b'
    else
        wall_type = crawl.random_element { ['x'] = 3, ['c'] = 3, ['v'] = 2 }
    end

    local percent_thickness_2 =   crawl.random_range(0, 8)
                                * crawl.random_range(0, 8)
    local percent_thickness_3 =   crawl.random_range(0, 7)
                                * crawl.random_range(0, 7)
    local percent_inner_box = crawl.random_range(0, 25)
    local percent_inner_new_wall = crawl.random_range(0, 100)
    local percent_inner_split = crawl.random_range(0, 25)
    if you.branch() == "Dis" then
        percent_thickness_2 = 0
        percent_thickness_3 = 0
        percent_inner_box = percent_inner_box * 1.5
        percent_inner_new_wall = 0
        percent_inner_split = percent_inner_split * 2
    end

    fill_area { x1=8, y1=8, x2=gxm-9, y2=gym-9, fill="." }

    for i = 0, 5 do
        for j = 0, 4 do
            local xs = 8 + (i * 13)
            local ys = 8 + (j * 14)
            local a1 = xs + crawl.random2avg(5, 2);
            local a2 = ys + crawl.random2avg(5, 2);
            local b1 = xs + 11 - crawl.random2avg(5, 2);
            local b2 = ys + 11 - crawl.random2avg(5, 2);

            if crawl.x_chance_in_y(6, 7)
                and is_valid_coord {x=a1, y=a2}
                and is_valid_coord{x=b1, y=b2}
                and not find_in_area {x1 = a1 - 1, y1 = a2 - 1,
                                      x2 = b1 + 1, y2 = b2 + 1,
                                      find = "xcvb+", find_vault = true } then

                local wall_type_room = theme.room_material(wall_type)

                local size_x = b1 - a1
                local size_y = b2 - a2
                local thickness = 1
                if size_x > 6 and size_y > 6
                   and crawl.x_chance_in_y(percent_thickness_3, 100) then
                    thickness = 3
                elseif size_x > 4 and size_y > 4
                       and crawl.x_chance_in_y(percent_thickness_2, 100) then
                    thickness = 2
                end

                table.insert(rooms, {a1, a2, b1, b2, thickness})
                make_box { x1=a1, y1=a2, x2=b1, y2=b2,
                           wall=wall_type_room, thickness=thickness }

                local size_x_inner = size_x - thickness * 2
                local size_y_inner = size_y - thickness * 2
                if size_x_inner > 3 and size_y_inner > 3 then

                    if crawl.x_chance_in_y(percent_inner_box, 100) then
                        local A1 = a1 + thickness + 1
                        local A2 = a2 + thickness + 1
                        local B1 = b1 - thickness - 1
                        local B2 = b2 - thickness - 1
                        local door_number = 1 +
                                            crawl.random2(2) * crawl.random2(2)

                        local wall_type_inner = wall_type_room
                        if crawl.x_chance_in_y(percent_inner_new_wall, 100) then
                            wall_type_inner = theme.room_material(wall_type)
                        end

                        make_box { x1=A1, y1=A2, x2=B1, y2=B2,
                                   wall=wall_type_inner }
                        make_box_doors { x1=A1, y1=A2, x2=B1, y2=B2,
                                         number=door_number }

                        if crawl.x_chance_in_y(thickness*4,
                                               percent_inner_box) then
                            treasure_area(A1+1, A2+1, B1-1, B2-1)
                        end

                    elseif crawl.x_chance_in_y(percent_inner_split, 100) then
                        local door_x = a1 + thickness + 1
                                       + crawl.random2(size_x_inner - 2)
                        local door_y = a2 + thickness + 1
                                       + crawl.random2(size_y_inner - 2)

                        if crawl.coinflip() then
                            for x = a1 + thickness, b1 - thickness do
                                mapgrd[x][door_y] = wall_type_room
                            end
                        else
                            for y = a2 + thickness, b2 - thickness do
                                mapgrd[door_x][y] = wall_type_room
                            end
                        end
                        mapgrd[door_x][door_y] = '+'
                    end

                end
            end
        end
    end

    for _, room in ipairs(rooms) do
        local doors = 1 + crawl.random2(5) - crawl.random2(3)
        if doors < 1 then
            doors = 1
        end

        if doors > 3 and crawl.one_chance_in(3) then
            doors = 2
        end

        local thickness = room[5]
        local outer_door = '+'
        local inner_door = '+'
        if thickness == 2 then
            outer_door = crawl.random_element { ['+'] = 1, ['.'] = 2 }
            inner_door = crawl.random_element { ['+'] = 1, ['.'] = 3 }
        elseif thickness == 3 then
            outer_door = crawl.random_element { ['+'] = 2, ['.'] = 1 }
            inner_door = crawl.random_element { ['+'] = 1, ['.'] = 2 }
        end

        if outer_door == '.' and crawl.coinflip() then
            doors = doors + 1
        end
        if inner_door == '.' and crawl.coinflip() then
            doors = doors + 1
        end

        make_box_doors {x1=room[1], y1=room[2], x2=room[3], y2=room[4],
                        number=doors, thickness=thickness,
                        door=outer_door, inner_door=inner_door,
                        veto_gates=true }
    end

    -- Prevent treasure rooms being overwritten by vaults
    kmask('|*% = vault')
}}
MAP
ENDMAP

##############################################################
# layout_misc
#
# This replaces dungeon.cc:_plan_5().
NAME: layout_misc
DEPTH: D, Lair, Snake, Elf, Dwarf, Crypt, Zot, Pan
WEIGHT: 10
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_misc
{{
    function random_coord(max_x, max_y)
        return crawl.random2(max_x - 20) + 10,
               crawl.random2(max_y - 20) + 10
    end

    local gxm, gym = dgn.max_bounds()
    local corridors = crawl.random_range(15, 25)

    extend_map { width = gxm, height = gym, fill = 'x' }

    local x, y = random_coord(gxm, gym)
    local new_x, new_y

    while corridors > 0 do
        new_x, new_y = random_coord(gxm, gym)

        join_the_dots { x1 = x, y1 = y, x2 = new_x, y2 = new_y }

        x, y = new_x, new_y
        corridors = corridors - 1
    end

    spotty_map { boxy = true, iterations = 100 }

    theme.level_material(_G)
}}
MAP
ENDMAP

##############################################################
# layout_caves
#
# One (sometimes more) large open caverns with irregular
# walls.
#
NAME: layout_caves
DEPTH: D:9-, Depths, Orc, Slime
CHANCE: 100% (Orc), 100% (Slime)
WEIGHT: 10
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_caves
{{
    local gxm, gym = dgn.max_bounds()

    extend_map { width = gxm, height = gym, fill = 'x' }

    spotty_stairs(mapgrd)

    local iterations
    local boxy = false
    local connected = false
    if you.in_branch("orc") or you.in_branch("slime") then
        if you.at_branch_bottom() then
            iterations = 600 + crawl.random2(600)
            connected = true
        else
            iterations = 100 + crawl.random2(500)
        end
    else
        -- Normal branches
        boxy = crawl.coinflip()
        iterations = 300 + crawl.random2(boxy and 750 or 1500)
    end

    spotty_map { boxy = boxy, iterations = iterations }

    -- For Orc branch end, fill in all but the largest zone
    if connected then
      zonify.map_fill_zones(_G, 1, 'x')
    end

    theme.D.caves(_G)
}}
# Enforce minimum floor size - otherwise we get very tiny floors sometimes
validate {{
    return count_feature_in_box { feat="." } > 600
}}
MAP
ENDMAP

##############################################################
# A long winding cavern of roughly constant width, snaking around all the
# level.  It forks from time to time, but never for long.
NAME: layout_twisted_cavern
DEPTH: D:5-
WEIGHT: 10
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_delve
{{
    if is_validating() then return; end

    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym}
    fill_area{fill = 'x', border = 'X'}

    delve(3, 3, 0, -1, 1)
    subst('X = x')

    theme.D.caves_classic(_G)
}}

##############################################################
## This replaces dungeon.cc:_roguey_level.
NAME: layout_roguey
DEPTH: D:2-, Lair, Snake, Elf
WEIGHT: 20
ORIENT: encompass
TAGS: overwritable layout no_primary_vault allow_dup unrand layout_type_rooms
{{
    function make_inner_room(room, feat, treasure)
        local inner_room = {
            x1 = room.x1 + 1, y1 = room.y1 + 1,
            x2 = room.x2 - 1, y2 = room.y2 - 1,
            wall = feat, number = 1
        }

        if treasure then inner_room.floor = '*' end

        make_box(inner_room)
        make_box_doors(inner_room)
    end

    local maze_startx = 0
    local maze_starty = 0
    local maze_endx = 0
    local maze_endy = 0

    function dig_maze(x, y)
        local delta = { {x =  2, y =  0},
                        {x = -2, y =  0},
                        {x =  0, y =  2},
                        {x =  0, y = -2} }
        local count = 0
        local i = 0
        local newx = 0
        local newy = 0
        local nextx = 0
        local nexty = 0
        while true do
            count = 0
            for i = 1, 4 do
                newx = x + delta[i].x
                newy = y + delta[i].y
                if newx >= maze_startx
                    and newx <= maze_endx
                    and newy >= maze_starty
                    and newy <= maze_endy then
                    if mapgrd[newx][newy] ~= '.' then
                       count = count + 1
                       if crawl.random2(count) == 0 then
                           nextx = newx
                           nexty = newy
                       end
                    end
                end
            end
            if count == 0 then
                return
            end
            if nexty == y then
                newy = y
                if nextx - x < 0 then
                    newx = nextx + 1
                else
                    newx = nextx - 1
                end
            else
                newx = x
                if nexty - y < 0 then
                    newy = nexty + 1
                else
                    newy = nexty - 1
                end
            end
            mapgrd[newx][newy] = '.'
            mapgrd[nextx][nexty] = '.'
            dig_maze(nextx, nexty)
        end
    end

    function make_roguey_maze(room)
        maze_startx = room.x1
        maze_starty = room.y1
        maze_endx = room.x2
        maze_endy = room.y2
        local startx = 2*crawl.random2((maze_endx - maze_startx) / 2)
                     + maze_startx
        local starty = 2*crawl.random2((maze_endy - maze_starty) / 2)
                     + maze_starty
        dig_maze(startx, starty)
    end

    function sign(a)
        return a > 0 and 1 or a < 0 and -1 or 0
    end

    function link_rooms(r1, r2, sideways)
        if not r1.present or not r2.present then
            return
        end
        local x1, y1, x2, y2
        local tries = 100
        if sideways then
            x1 = r1.x2 + 1
            y1 = crawl.random_range(r1.y1 + 1, r1.y2 - 1)
            while (r1.maze and mapgrd[r1.x2][y1] ~= '.') do
                y1 = crawl.random_range(r1.y1 + 1, r1.y2 - 1)
            end
            x2 = r2.x1 - 1
            y2 = crawl.random_range(r2.y1 + 1, r2.y2 - 1)
            while (r2.maze and mapgrd[r2.x1][y2] ~= '.') or
                  (y1 == y2 and not crawl.one_chance_in(3)) do
                y2 = crawl.random_range(r2.y1 + 1, r2.y2 - 1)
            end

            if x2 - x1 >= 2 then
                mapgrd[x1][y1] = r1.door
                mapgrd[x2][y2] = r2.door
                x1 = x1 + 1
                x2 = x2 - 1
            end
        else
            x1 = crawl.random_range(r1.x1 + 1, r1.x2 - 1)
            while (r1.maze and mapgrd[x1][r1.y2] ~= '.') do
                x1 = crawl.random_range(r1.x1 + 1, r1.x2 - 1)
            end
            y1 = r1.y2 + 1
            x2 = crawl.random_range(r2.x1 + 1, r2.x2 - 1)
            while (r2.maze and mapgrd[x2][r2.y1] ~= '.')
                  or (x1 == x2 and not crawl.one_chance_in(3)) do
                x2 = crawl.random_range(r2.x1 + 1, r2.x2 - 1)
            end
            y2 = r2.y1 - 1

            if y2 - y1 >= 2 then
                mapgrd[x1][y1] = r1.door
                mapgrd[x2][y2] = r2.door
                y1 = y1 + 1
                y2 = y2 - 1
            end
        end

        mapgrd[x1][y1] = '.'

        while x1 ~= x2 or y1 ~= y2 do
            if x1 ~= x2
               and crawl.x_chance_in_y(math.abs(x2 - x1),
                                       math.abs(x2 - x1) + math.abs(y2 - y1))
               then
                x1 = x1 + sign(x2 - x1)
            else
                y1 = y1 + sign(y2 - y1)
            end

            mapgrd[x1][y1] = '.'
        end
    end

    function room_is_placeable(x1, y1, x2, y2)
        if is_validating() then return true end
        for point in iter.rect_iterator(dgn.point(x1, y1),
                                        dgn.point(x2, y2)) do
            if dgn.in_vault(point.x, point.y) then
                return false
            end
        end
        return true
    end

    local gxm, gym = dgn.max_bounds()

    extend_map { width = gxm, height = gym, fill = 'x' }

    local rows = crawl.random_element({[5] = 10, [4] = 5, [3] = 1})
    local cols = crawl.random_element({[5] = 10, [4] = 5, [3] = 1})
    local xspace = 13 + 2*(5-cols)
    local yspace = 11 + 2*(5-rows)
    local xsize  = 6 + 2*(5-cols)
    local ysize  = 6 + 2*(5-rows)
    local special = -1

    if crawl.one_chance_in(10) and dgn.map_by_tag('special_room', true) then
        special = crawl.random_range(1, rows * cols)
    end

    local rooms = {}

    for y = 0, rows - 1 do
        for x = 0, cols - 1 do
            local base_x, base_y = x * xspace + 8, y * yspace + 8
            local x1, x2, y1, y2
            local tries = 50
            local placeable = true
            while tries > 0 do
                x1 = base_x + crawl.random2(4)
                y1 = base_y + crawl.random2(4)
                x2 = base_x + xsize + crawl.random2(5)
                y2 = base_y + ysize + crawl.random2(3)
                if room_is_placeable(x1, y1, x2, y2) then break end
                tries = tries - 1
            end

            if tries == 0 then placeable = false end

            local room = {
                x1 = base_x + crawl.random2(4),
                y1 = base_y + crawl.random2(4),
                x2 = base_x + xsize + crawl.random2(5),
                y2 = base_y + ysize + crawl.random2(3),
                -- Rogue has 0-3 rooms per 3x3 level missing;
                -- this averages to 1.5 in 9, or 1 in 6.
                present = placeable and not crawl.one_chance_in(6),
                maze = (crawl.random2(10) < you.absdepth() - 1 and
                        crawl.one_chance_in(15)),
                fill = '.',
                door = crawl.one_chance_in(3) and '.' or '+',
            }

            if room.maze then
                if ((room.x2 - room.x1) % 2) ~= 0 then
                    room.x2 = room.x2 + 1
                end
                if ((room.y2 - room.y1) % 2) ~= 0 then
                    room.y2 = room.y2 + 1
                end
            end

            table.insert(rooms, room)
        end
    end

    for i, room in ipairs(rooms) do
        if i == special then
            if room.present then
                room.fill = 'O'
                room.door = '+'
            else
                special = -1
            end
        end

        if room.present then
            if room.maze then
                make_roguey_maze(room)
            else
                fill_area(room)
            end

            if not room.maze
               and room.fill == '.'
               and (room.x2 - room.x1 > 5)
               and (room.y2 - room.y1 > 5)
               and (you.in_branch("D") or you.in_branch("Lair"))
               and crawl.x_chance_in_y(you.absdepth() - 9, 450)
            then
                local feat = crawl.random_element { ['v'] = 2,
                                                    ['c'] = 3,
                                                    ['x'] = 3 }
                make_inner_room(room, feat, crawl.coinflip())
            end
        end
    end

    for i, room in ipairs(rooms) do
        if room.present then
            -- If there is a neighbour on the right, connect to it.
            if i % cols ~= 0 then
                local j = i + 1
                local done = false
                while j % cols ~= 1 and not done do
                    if rooms[j].present then
                        link_rooms(room, rooms[j], true)
                        done = true
                    else
                        j = j + 1
                    end
                end
            end

            -- If there is a neighbour below, connect to it.
            if i + cols <= #rooms then
                local j = i + cols
                local done = false
                while j <= #rooms and not done do
                    if rooms[j].present then
                        link_rooms(room, rooms[j], false)
                        done = true
                    else
                        j = j + cols
                    end
                end
            end
        end
    end

    -- Prevent staircases from being placed in special or inner rooms.
    nsubst('. = { / ( / [ / < / } / ) / ] / > / .')
    -- Prevent treasure rooms being overwritten by vaults
    kmask('* = vault')

    if special ~= -1 then
        subvault('O : special_room')
    end
}}
MAP
ENDMAP

NAME: layout_delve
DEPTH: Spider
CHANCE: 100%
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_delve
{{
    if is_validating() then return; end

    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym}
    fill_area{fill = 'x', border = 'X'}

    local ngb_min = 2
    local ngb_max = crawl.random_range(3, 8)
    if crawl.one_chance_in(10) then
      -- sometimes use a more cramped layout
      ngb_min = 1
      ngb_max = crawl.random_range(5, 7)
    end
    if crawl.one_chance_in(20) then
      -- or a wider one
      ngb_min = 3
      ngb_max = 4
    end
    local connchance = crawl.random_element
        { [0] = 2, [5] = 1, [20] = 1, [50] = 1, [100] = 1 }
    local top = crawl.random_element
        { [1] = 1, [20] = 1, [125] = 1, [500] = 1, [999999] =1 }
    crawl.dpr("<lightmagenta>delve(" .. ngb_min .. ", " .. ngb_max .. ", " ..
              connchance .. ", -1, " .. top .. ")</lightmagenta>")
    delve(ngb_min, ngb_max, connchance, -1, top)
    if crawl.coinflip() then
      crawl.dpr("delve: adding water");
      subst('. = @')
      delve(ngb_min, ngb_max, 100, 100, top)
      subst('. = w')
      subst('@ = .')
    end
    subst('X = x')
}}

################################################################
# layout_cocytus
#
# An ice cave approximation for Cocytus.  There is one main
#  delved path that is guaranteed to contain at least one up and
#  down stairs.  There are also other delved paths and
#  diamond-shaped rooms, but these might be behind pools of
#  water.  To avoid trapping the player, all random teleports go
#  to the main path.
#
NAME: layout_cocytus
DEPTH: Coc
CHANCE: 100%
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand chance_cocytus layout_type_delve
{{
    if is_validating() then return; end

    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym}

    local map_border = 5
    local map_x_min = map_border
    local map_y_min = map_border
    local map_x_max = gxm - map_border - 1
    local map_y_max = gym - map_border - 1
    fill_area { x1 = map_x_min, y1 = map_y_min,
                x2 = map_x_max, y2 = map_y_max, fill = 'x', border = 'X' }

    -- Due to the behaviour of the spotty_map, delve, and
    --  fill_disconnected functions, we need to make some
    --  strange substitutions to have the right glyphs on the
    --  map when we call these functions.  We will put the
    --  glyphs right again later.
    --    -> spotty_map always expands '.' glyphs with '.'s
    --    -> delve always places '.' glyphs and seems to have
    --       trouble with 'w's
    --    -> fill_disconnected will not fill custom-defined
    --       glyphs, even if they are kfeat-ed to another glyph

    -- Add some water patches.
    --    1. Add some circles of floor
    --    2. Expand the floor circles using spotty_map
    --    3. Convert the floor to unbreakable wall (later water)
    for i = 1, crawl.random_range(40, 60) do
        local x = crawl.random_range(map_x_min, map_x_max)
        local y = crawl.random_range(map_y_min, map_y_max)
        local radius = crawl.random_range(0, 1)
        if crawl.one_chance_in(15) then
            radius = crawl.random_range(2, 4)
        end

        make_circle ({ x = x, y = y, radius = radius, fill = '.'})
    end
    local iterations = crawl.random_range(150, 350)
    spotty_map { boxy = false, iterations = iterations }
    subst('. = X')

    -- Delve the paths
    local ngb_min = 2
    local ngb_max = 5
    -- chance of connecting to an adjecent passage
    local connchance = 0
    local total_count = crawl.random_range(200, 500)
    local top = 10

    -- Delve the main path and add two sets of stairs.  This
    --  guarantees the map is connected without crossing water.
    --  Keep the '@' glyph for connectivity checking later.
    delve(ngb_min, ngb_max, connchance, total_count, top)
    nsubst('. = 1:@ / *:.')
    local x, y = farthest_from('@')
    mapgrd[x][y] = '{'
    x, y = farthest_from('{')
    mapgrd[x][y] = '}'
    subst('. = >')

    -- Delve some smaller paths
    for i = 1, crawl.random_range(1, 3) do
        ngb_min = crawl.random_element { [1] = 3, [2] = 1 }
        ngb_max = crawl.random_range(2, 5)
        connchance = crawl.random_element
            { [0] = 1, [2] = 2, [5] = 1, [20] = 1 }
        total_count = crawl.random_range(50, 150)
        top = crawl.random_element
            { [1] = 1, [20] = 1, [125] = 1, [500] = 1, [999999] = 1 }

        delve(2, 3, 3, 150, 100)
    end
    subst('. = <')

    -- Fix up the map after delving.
    --    1. The edges become walls
    --    2. The remaining unbreakable walls become water
    fill_area { x1 = 0,         y1 = 0,
                x2 = map_x_min, y2 = gym-1,     fill = 'x' }
    fill_area { x1 = map_x_max, y1 = 0,
                x2 = gxm-1,     y2 = gym-1,     fill = 'x' }
    fill_area { x1 = map_x_min, y1 = 0,
                x2 = map_x_max, y2 = map_y_min, fill = 'x' }
    fill_area { x1 = map_x_min, y1 = map_y_max,
                x2 = map_x_max, y2 = gym-1,     fill = 'x' }
    subst('X = w')

    -- Add some rooms
    for i = 1, crawl.random_range(15, 25) do
        local x = crawl.random_range(8, gxm-9)
        local y = crawl.random_range(8, gym-9)
        local radius = crawl.random_element
            { [1] = 30, [2] = 50, [3] = 15, [4] = 4, [5] = 1 }

        octa_room { x1 = x - radius, y1 = y - radius,
                    x2 = x + radius, y2 = y + radius,
                    oblique = radius, replace = 'x', inside = '<'}
    end

    -- Finishing up stuff.
    --     1. Fill everything not connected to the '@' set when
    --        delving the first path.
    --     2. Set the first delved path to floor.
    --     3. Set the rooms and the other delved paths to
    --        no_r_tele_into floor ('_').  These areas might be
    --        inescapable if water convers the path out.
    fill_disconnected{wanted = '@'}
    subst('@> = .')
    subst('< = _')
    kfeat('_ = .')
    kprop('_ = no_rtele_into')
}}

##############################################################
# layout_dis, by rwbarton
NAME: layout_dis
DEPTH: Dis:1-6
WEIGHT: 20
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_rooms
{{
    local subdivide_threshold = 12

    -- Create the alternate version?
    local alt = crawl.x_chance_in_y(2,3)

    function room(x1, y1, x2, y2)
        if x1 < x2 and y1 < y2 then
           local floor_type = '.'
           make_box { x1=x1, y1=y1, x2=x2, y2=y2, wall='x', floor=floor_type }

           if x1+2 <= x2-2 and y1+2 <= y2-2 and crawl.one_chance_in(10) then
              -- decorative statues
              local x3 = crawl.random_range(x1+2, x2-2)
              local y3 = crawl.random_range(y1+2, y2-2)
              local x4 = x1+x2-x3
              local y4 = y1+y2-y3

              if math.abs(x3 - x4) ~= 1 and math.abs(y3 - y4) ~= 1 then
                  mapgrd[x3][y3] = 'G'
                  mapgrd[x4][y3] = 'G'
                  mapgrd[x3][y4] = 'G'
                  mapgrd[x4][y4] = 'G'
               end
           end

           if (x1+x2) % 2 == 0 and (y1+y2) % 2 == 0
              and crawl.one_chance_in(10) then
              -- dry fountain
              mapgrd[(x1+x2)/2][(y1+y2)/2] = 'V'
           end
        end
    end

    function fill(x1, y1, x2, y2, orient)
        if orient == 0 then
            if x2 - x1 < subdivide_threshold then
               if y2 - y1 >= subdivide_threshold then
                  fill(x1, y1, x2, y2, 1)
               else
                  room(x1, y1, x2, y2)
               end
            else
               local x3 = x1 + 4 + crawl.random2(x2 - x1 - 7)
               fill(x1, y1, x3, y2, 1)
               fill(x3, y1, x2, y2, 1)
               if not alt then
                   replace_random { x1=x3, y1=y1+1, x2=x3, y2=y2-1,
                                    find='x', replace='+' }
               end
           end
        else
            if y2 - y1 < subdivide_threshold then
               if x2 - x1 >= subdivide_threshold then
                  fill(x1, y1, x2, y2, 0)
               else
                   room(x1, y1, x2, y2)
               end
            else
               local y3 = y1 + 4 + crawl.random2(y2 - y1 - 7)
               fill(x1, y1, x2, y3, 0)
               fill(x1, y3, x2, y2, 0)
               if not alt then
                   replace_random { x1=x1+1, y1=y3, x2=x2-1, y2=y3,
                                    find='x', replace='+' }
               end
            end
        end
    end

    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    fill_area{fill = 'x'}
    fill_area { x1=8, y1=8, x2=gxm-9, y2=gym-9, fill="." }

    fill(7, 7, gxm-8, gym-8, 0)

    local border,fill = 'x','.'
    local connection = crawl.random_element({[fill] = 1, ["+"] = 4})

    -- Alternate version, connect rooms at the end.
    if alt then
        connect_adjacent_rooms { max = crawl.random_range(500, 750),
                                 min = 250, replace = '+', check_empty = true }
        zonify.map_fill_zones(_G, 1, 'x')
    end
}}
# Enforce minimum floor size - this is important with the alt version
validate {{
    return count_feature_in_box { feat="." } > 1200
}}
COLOUR:  G : cyan
TILE:    G = dngn_statue_iron_golem
MAP
ENDMAP

##############################################################
# layout_overlapping_boxes
#
# This layout places many overlapping boxes and then connects
# the resulting mess into a layout.
#
NAME: layout_overlapping_boxes
DEPTH: Dis:1-6
WEIGHT: 10
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_rooms
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym}
    fill_area{fill="x"}

    local xmin_half = 6
    local xmax_half = gxm / 2 - 6
    local ymin_half = 3
    local ymax_half = gym / 2 - 3

    for i = 1, 100 do
        local xs
        local ys
        if crawl.one_chance_in(8) then
            xs = crawl.random_range(2, 3)
            ys = crawl.random_range(6, 15)
        elseif crawl.one_chance_in(7) then
            xs = crawl.random_range(6, 15)
            ys = crawl.random_range(2, 3)
        else
            xs = crawl.random_range(3, 6)
            ys = crawl.random_range(3, 6)
        end
        local x = crawl.random_range(xmin_half, xmax_half - xs)
        local y = crawl.random_range(ymin_half, ymax_half - ys)
        make_box { x1 = x*2, y1 = y*2, x2 = (x + xs)*2, y2 = (y + ys)*2,
                   wall = 'x', floor = '.' }
    end

    connect_adjacent_rooms { wall = "x", floor = ".", replace = '+',
                             max = 800, check_empty = true }
    zonify.map_fill_zones(_G, 1, 'x')
}}
# Enforce minimum floor size
validate {{
    return count_feature_in_box { feat="." } > 1200
}}
MAP
ENDMAP

##############################################################
# layout_jigsaw
#
# A grid of irregular rooms with walls between them.  The
#  effect of this is that it is not always obvious whether you
#  are inside a room or outside.
#
NAME: layout_jigsaw
DEPTH: Dis:1-6
WEIGHT: 10
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_rooms
{{
    local ROOMS_ACROSS = 4
    local ROOM_SIZE = 11
    local ROOM_SEPARATION = 2
    local EDGE_IN = 5
    local ROOM_IN = 4

    local ROOM_SPACING = ROOM_SIZE + ROOM_SEPARATION
    local MAP_SIZE = ROOM_SPACING * ROOMS_ACROSS + ROOM_SEPARATION
                     + EDGE_IN * 2
    local FIRST_ROOM = EDGE_IN + ROOM_SEPARATION
    local DOOR_OFFSET_MIN = FIRST_ROOM + ROOM_IN - 1
    local DOOR_OFFSET_MAX = FIRST_ROOM + ROOM_SIZE - ROOM_IN

    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    assert(MAP_SIZE < gxm, "Map size is too large")
    assert(MAP_SIZE < gym, "Map size is too large")
    make_irregular_box { x1    = 0,            y1    = 0,
                         x2    = MAP_SIZE - 1, y2    = MAP_SIZE - 1,
                         div_x = MAP_SIZE / 4, div_y = MAP_SIZE / 4,
                         in_x  = EDGE_IN,      in_y  = EDGE_IN;
                         door_count = 0 }

    -- add rooms in a grid
    for i = 0, ROOMS_ACROSS - 1 do
        for j = 0, ROOMS_ACROSS - 1 do
            local x = FIRST_ROOM + i * ROOM_SPACING
            local y = FIRST_ROOM + j * ROOM_SPACING

            make_irregular_box { x1 = x, x2 = x + ROOM_SIZE - 1,
                                 y1 = y, y2 = y + ROOM_SIZE - 1,
                                 div_x = 3, div_y = 3,
                                 in_x = ROOM_IN, in_y = ROOM_IN,
                                 door_count = crawl.random_range(1, 3) }
        end
    end

    -- add horizontal walls
    for i = 0, ROOMS_ACROSS do
        for j = 0, ROOMS_ACROSS - 1 do
            local x = EDGE_IN + i * ROOM_SPACING
                      + crawl.random_range(0, ROOM_SEPARATION - 1)
            local y = crawl.random_range(DOOR_OFFSET_MIN, DOOR_OFFSET_MAX)
                      + j * ROOM_SPACING

            -- add door
            mapgrd[x][y] = '+'

            -- build wall to left
            local x1 = x
            while x1 > 0 and mapgrd[x1][y + 1] ~= 'x'
                  and mapgrd[x1][y - 1] ~= 'x' and mapgrd[x1 - 1][y] ~= 'x' do
                x1 = x1 - 1
                mapgrd[x1][y] = 'x'
            end

            -- build wall to right
            local x1 = x
            while x1 < MAP_SIZE - 2 and mapgrd[x1][y + 1] ~= 'x'
                  and mapgrd[x1][y - 1] ~= 'x' and mapgrd[x1 + 1][y] ~= 'x' do
                x1 = x1 + 1
                mapgrd[x1][y] = 'x'
            end
        end
    end

    -- add vertical walls
    for i = 0, ROOMS_ACROSS - 1 do
        for j = 0, ROOMS_ACROSS do
            local x = crawl.random_range(DOOR_OFFSET_MIN, DOOR_OFFSET_MAX)
                      + i * ROOM_SPACING
            local y = EDGE_IN + j * ROOM_SPACING
                      + crawl.random_range(0, ROOM_SEPARATION - 1)

            -- add door
            mapgrd[x][y] = '+'

            -- build wall to top
            local y1 = y
            while y1 > 0 and mapgrd[x + 1][y1] ~= 'x'
                  and mapgrd[x - 1][y1] ~= 'x' and mapgrd[x][y1 - 1] ~= 'x' do
                y1 = y1 - 1
                mapgrd[x][y1] = 'x'
            end

            -- build wall to bottom
            local y1 = y
            while y1 < MAP_SIZE - 2 and mapgrd[x + 1][y1] ~= 'x'
                  and mapgrd[x - 1][y1] ~= 'x' and mapgrd[x][y1 + 1] ~= 'x' do
                y1 = y1 + 1
                mapgrd[x][y1] = 'x'
            end
        end
    end

    --
    -- We do need this: the walls we add can seal off areas
    --
    -- e.g.
    -- ..xxxxx..
    -- .xx...x..    x is existing room
    -- .x..xxx..
    -- xx..x*vvv    v is new wall (really made of 'x's)
    -- x...xxx..
    -- xxx...x..    * is isolated location
    -- ..xxxxx..
    --
    -- Also, we might block all the doors to a room
    --

    zonify.map_fill_zones(_G, 1, 'x')
}}
MAP
ENDMAP

##############################################################
# Dummy layouts that just call C++ functions that do all the work.
NAME: layout_basic
DEPTH: D, Depths, Lair, Snake, Elf, Dwarf, Crypt, Zot
WEIGHT: 50, 10 (D:1), 20 (Geh), 10 (Zot)
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_basic
{{
    if not is_validating() then layout_basic() end
}}
MAP
ENDMAP

# XXX: Disabled until we can annoy the player less with water monsters.
NAME: layout_bigger_room
DEPTH: D:9-, Lair:1-7
WEIGHT: 0
ORIENT: encompass
TAGS: overwritable layout no_primary_vault allow_dup unrand layout_type_open
{{
    if not is_validating() then layout_bigger_room() end
}}
MAP
ENDMAP

NAME: layout_chaotic_city
DEPTH: D:4-, Lair:1-3, Snake, Dwarf, Crypt:1-4, Dis, Pan
WEIGHT: 10
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_city
{{
    if not is_validating() then
      layout_chaotic_city((you.branch() == "Dis") and "metal_wall" or nil)
    end
}}
MAP
ENDMAP

NAME: layout_shoals
DEPTH: Shoals
CHANCE: 100%
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_shoals
{{
    if not is_validating() then layout_shoals() end
}}
MAP
ENDMAP

NAME: layout_swamp
DEPTH: Swamp
CHANCE: 100%
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand layout_type_swamp
{{
    if is_validating() then return; end

    dgn.layout_swamp()

    -- Prevent tele closets
    zonify.grid_fill_water_zones(1,"mangrove")

}}
MAP
ENDMAP
